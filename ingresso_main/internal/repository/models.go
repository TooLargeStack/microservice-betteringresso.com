// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package repository

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type MoviesGenreEnum string

const (
	MoviesGenreEnumACTION    MoviesGenreEnum = "ACTION"
	MoviesGenreEnumADVENTURE MoviesGenreEnum = "ADVENTURE"
	MoviesGenreEnumANIMATION MoviesGenreEnum = "ANIMATION"
	MoviesGenreEnumBIOGRAPHY MoviesGenreEnum = "BIOGRAPHY"
	MoviesGenreEnumCOMEDY    MoviesGenreEnum = "COMEDY"
	MoviesGenreEnumCRIME     MoviesGenreEnum = "CRIME"
	MoviesGenreEnumDRAMA     MoviesGenreEnum = "DRAMA"
	MoviesGenreEnumFAMILY    MoviesGenreEnum = "FAMILY"
	MoviesGenreEnumFANTASY   MoviesGenreEnum = "FANTASY"
	MoviesGenreEnumHISTORY   MoviesGenreEnum = "HISTORY"
	MoviesGenreEnumHORROR    MoviesGenreEnum = "HORROR"
	MoviesGenreEnumMUSICAL   MoviesGenreEnum = "MUSICAL"
	MoviesGenreEnumMYSTERY   MoviesGenreEnum = "MYSTERY"
	MoviesGenreEnumSCIFI     MoviesGenreEnum = "SCI-FI"
	MoviesGenreEnumTHRILLER  MoviesGenreEnum = "THRILLER"
	MoviesGenreEnumWAR       MoviesGenreEnum = "WAR"
	MoviesGenreEnumROMANCE   MoviesGenreEnum = "ROMANCE"
)

func (e *MoviesGenreEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MoviesGenreEnum(s)
	case string:
		*e = MoviesGenreEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for MoviesGenreEnum: %T", src)
	}
	return nil
}

type NullMoviesGenreEnum struct {
	MoviesGenreEnum MoviesGenreEnum
	Valid           bool // Valid is true if MoviesGenreEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMoviesGenreEnum) Scan(value interface{}) error {
	if value == nil {
		ns.MoviesGenreEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MoviesGenreEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMoviesGenreEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.MoviesGenreEnum, nil
}

type RoomTypeEnum string

const (
	RoomTypeEnumDEFAULTROOM RoomTypeEnum = "DEFAULT_ROOM"
	RoomTypeEnumVIPROOM     RoomTypeEnum = "VIP_ROOM"
	RoomTypeEnumPREMIUMROOM RoomTypeEnum = "PREMIUM_ROOM"
	RoomTypeEnumIMAXROOM    RoomTypeEnum = "IMAX_ROOM"
	RoomTypeEnumOTHERROOM   RoomTypeEnum = "OTHER_ROOM"
)

func (e *RoomTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RoomTypeEnum(s)
	case string:
		*e = RoomTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for RoomTypeEnum: %T", src)
	}
	return nil
}

type NullRoomTypeEnum struct {
	RoomTypeEnum RoomTypeEnum
	Valid        bool // Valid is true if RoomTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoomTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.RoomTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RoomTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoomTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.RoomTypeEnum, nil
}

// Cines table
type Cine struct {
	// Cine ID
	ID uuid.NullUUID `json:"id"`
	// Cine name
	Name string `json:"name"`
	// Cine phone number
	Phone int32 `json:"phone"`
	// Cine website
	Website string `json:"website"`
	// Cine address
	Address string `json:"address"`
	// Cine zip code
	Zip int32 `json:"zip"`
	// Cine city
	City string `json:"city"`
	// Cine state
	State string `json:"state"`
	// Cine country
	Country string `json:"country"`
	// The time when the cine was created
	CreatedAt time.Time `json:"created_at"`
	// The time when the cine was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// Contains all the movies
type Movie struct {
	ID uuid.NullUUID `json:"id"`
	// The title of the movie
	Title string `json:"title"`
	Image string `json:"image"`
	// The year the movie was released
	ReleasedYear int32 `json:"released_year"`
	// The length of the movie in minutes
	Minutes int32 `json:"minutes"`
	// The genre of the movie
	Genre MoviesGenreEnum `json:"genre"`
	// The synopsis of the movie
	Synopsis string `json:"synopsis"`
	// The date and time the movie was created
	CreatedAt time.Time `json:"created_at"`
	// The date and time the movie was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// Movie available sessions
type MovieSession struct {
	// Movie session ID
	ID uuid.NullUUID `json:"id"`
	// Cine ID
	CineID uuid.UUID `json:"cine_id"`
	// Room ID
	RoomID uuid.UUID `json:"room_id"`
	// Movie ID
	MovieID uuid.UUID `json:"movie_id"`
	// The time when started the movie
	StartTime time.Time `json:"start_time"`
	// The time when finished the movie
	EndTime time.Time `json:"end_time"`
	// The time when the movie session was created
	CreatedAt time.Time `json:"created_at"`
	// The time when the movie session was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// The rooms in the cine
type Room struct {
	// The unique identifier for the room
	ID uuid.NullUUID `json:"id"`
	// The maximum number of people that can be in the room at the same time
	Capacity int32 `json:"capacity"`
	// The type of the room
	Type RoomTypeEnum `json:"type"`
	// The chairs in the room
	Seats json.RawMessage `json:"seats"`
	// The time when the room was created
	CreatedAt time.Time `json:"created_at"`
	// The time when the room was last updated
	UpdatedAt time.Time `json:"updated_at"`
}
